{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "dist/Disclosure.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPDisclosure",
          "members": [
            {
              "kind": "field",
              "name": "trigger"
            },
            {
              "kind": "field",
              "name": "content"
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "parameters": [
                {
                  "name": "event",
                  "description": "The event object"
                }
              ],
              "description": "Handle click events"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-disclosure",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPDisclosure",
            "module": "dist/Disclosure.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-disclosure",
          "declaration": {
            "name": "LFPDisclosure",
            "module": "dist/Disclosure.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Heading.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPHeading",
          "members": [
            {
              "kind": "field",
              "name": "id",
              "default": "id"
            },
            {
              "kind": "field",
              "name": "href",
              "default": "`#${id}`"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-h",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPHeading",
            "module": "dist/Heading.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-h",
          "declaration": {
            "name": "LFPHeading",
            "module": "dist/Heading.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Nixie.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPNixieTube",
          "members": [
            {
              "kind": "field",
              "name": "clsPrefix",
              "type": {
                "text": "string"
              },
              "default": "'digit-'"
            },
            {
              "kind": "field",
              "name": "digitAttr",
              "type": {
                "text": "string"
              },
              "default": "'active-digit'"
            },
            {
              "kind": "field",
              "name": "activeDigit"
            }
          ],
          "attributes": [
            {
              "name": "active-digit"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-nixie-tube",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPNixieTube",
            "module": "dist/Nixie.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-nixie-tube",
          "declaration": {
            "name": "LFPNixieTube",
            "module": "dist/Nixie.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Numberinput.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPNumberInput",
          "members": [
            {
              "kind": "field",
              "name": "input"
            },
            {
              "kind": "field",
              "name": "decrementButton"
            },
            {
              "kind": "field",
              "name": "incrementButton"
            },
            {
              "kind": "method",
              "name": "#createButton",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#clickAndHold",
              "privacy": "private",
              "parameters": [
                {
                  "name": "btnEl"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-numberinput",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPNumberInput",
            "module": "dist/Numberinput.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-numberinput",
          "declaration": {
            "name": "LFPNumberInput",
            "module": "dist/Numberinput.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Progressbar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPProgressbar",
          "members": [
            {
              "kind": "field",
              "name": "showValue",
              "type": {
                "text": "boolean"
              },
              "default": "!!this.getAttribute('show-value')"
            },
            {
              "kind": "field",
              "name": "notify",
              "type": {
                "text": "boolean"
              },
              "default": "!!this.getAttribute('aria-notify')"
            },
            {
              "kind": "field",
              "name": "min"
            },
            {
              "kind": "field",
              "name": "max"
            },
            {
              "kind": "field",
              "name": "textLabel"
            },
            {
              "kind": "field",
              "name": "range"
            },
            {
              "kind": "field",
              "name": "output"
            },
            {
              "kind": "method",
              "name": "#setTextLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "rel"
                },
                {
                  "name": "abs"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value"
                },
                {
                  "name": "abs",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "update",
              "static": true,
              "parameters": [
                {
                  "name": "id"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-progressbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPProgressbar",
            "module": "dist/Progressbar.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-progressbar",
          "declaration": {
            "name": "LFPProgressbar",
            "module": "dist/Progressbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Scrollmeter.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPScrollMeter",
          "members": [
            {
              "kind": "field",
              "name": "viewportHeight"
            },
            {
              "kind": "field",
              "name": "pageHeight"
            },
            {
              "kind": "field",
              "name": "barSize"
            },
            {
              "kind": "field",
              "name": "meterSize"
            },
            {
              "kind": "field",
              "name": "meter"
            },
            {
              "kind": "method",
              "name": "#init",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-scrollmeter",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPScrollMeter",
            "module": "dist/Scrollmeter.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-scrollmeter",
          "declaration": {
            "name": "LFPScrollMeter",
            "module": "dist/Scrollmeter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Skeleton.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPSkeletext",
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-skeletext",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPSkeletext",
            "module": "dist/Skeleton.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-skeletext",
          "declaration": {
            "name": "LFPSkeletext",
            "module": "dist/Skeleton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Tablist.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A W3 compliant tab list web component.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/tabs/",
          "name": "LFPTablist",
          "members": [
            {
              "kind": "field",
              "name": "tabMenu"
            },
            {
              "kind": "field",
              "name": "panels"
            },
            {
              "kind": "field",
              "name": "orientation"
            },
            {
              "kind": "field",
              "name": "backKey",
              "type": {
                "text": "string"
              },
              "default": "'ArrowLeft'"
            },
            {
              "kind": "field",
              "name": "forwardKey",
              "type": {
                "text": "string"
              },
              "default": "'ArrowRight'"
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "method",
              "name": "#setLinkedHeading",
              "privacy": "private",
              "parameters": [
                {
                  "name": "url"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "selected"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#createTabButton",
              "privacy": "private",
              "parameters": [
                {
                  "name": "description"
                },
                {
                  "name": "idx"
                },
                {
                  "name": "tabindex",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleVisibility",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setAttributes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el"
                },
                {
                  "name": "items"
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-tablist",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPTablist",
            "module": "dist/Tablist.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-tablist",
          "declaration": {
            "name": "LFPTablist",
            "module": "dist/Tablist.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/ToC.js",
      "declarations": [
        {
          "kind": "class",
          "description": "This class creates a comprehensive table of contents from a list of given\nheadings found in the document. The ToC can be updated during runtime through\nlistening to the `lfp:update-toc` event on the document root.",
          "name": "LFPToC",
          "members": [
            {
              "kind": "field",
              "name": "maxLevel"
            },
            {
              "kind": "field",
              "name": "minLevel"
            },
            {
              "kind": "field",
              "name": "headings"
            },
            {
              "kind": "method",
              "name": "#isValidAttr",
              "privacy": "private",
              "parameters": [
                {
                  "name": "attr",
                  "description": "the attribute's name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "bool",
                  "default": "false",
                  "description": "flag if you expect the attribute to function as a\nboolean indicator, i.e., the attribute does not need a value and this\nfunction is only checking if the attribute is present on the element at all",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "`element.getAttribute()` returns the factual value the element's attribute\nactually has. This means that it returns a truish empty string if the\nattribute is present but there is no value given. If you want to verify that\nthere is a value (because your component depends on it) you have to actively\ncheck for this, too. This function offers a short-hand for this process.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setupObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#createToC",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#collectHeadings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setId",
              "privacy": "private",
              "parameters": [
                {
                  "name": "headings"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#createSelectorStr",
              "privacy": "private",
              "description": "Creates a valid selector string from a range of numbers to gather a\nNodeList of headings of the document",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#createListElement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "headings",
                  "description": "a NodeList of heading\nelements to be included in the table of content",
                  "type": {
                    "text": "NodeListOf<HTMLHeadingElement>"
                  }
                },
                {
                  "name": "idx",
                  "description": "the starting point at which to enter the node list",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Creates the content for the ToC by iterating recursively over all given headings",
              "return": {
                "type": {
                  "text": ""
                }
              }
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-toc",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPToC",
            "module": "dist/ToC.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-toc",
          "declaration": {
            "name": "LFPToC",
            "module": "dist/ToC.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/Toast.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPToast",
          "members": [
            {
              "kind": "field",
              "name": "ul"
            },
            {
              "kind": "field",
              "name": "delay"
            },
            {
              "kind": "field",
              "name": "dismissable",
              "type": {
                "text": "boolean"
              },
              "default": "!!this.getAttribute('close-button')"
            },
            {
              "kind": "field",
              "name": "animationDelay"
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#remove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "element"
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "static": true,
              "parameters": [
                {
                  "name": "description",
                  "description": "Text to describe what the user is informed about (keep it short!)",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "title",
                  "description": "An optional title for the toast.",
                  "type": {
                    "text": "String?"
                  }
                },
                {
                  "name": "dismissable",
                  "default": "false",
                  "description": "Toggle if the dismissable with a close button.",
                  "optional": true,
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Emits a signal that is catched by the toast component to give out a toast.\n\n**Example**:\n```js\nLFPToast.emit('Toast description', 'Toast title', true);\n```"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-toast",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPToast",
            "module": "dist/Toast.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-toast",
          "declaration": {
            "name": "LFPToast",
            "module": "dist/Toast.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "LFPDisclosure",
          "declaration": {
            "name": "LFPDisclosure",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPNixie",
          "declaration": {
            "name": "LFPNixie",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPNumberinput",
          "declaration": {
            "name": "LFPNumberinput",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPProgressbar",
          "declaration": {
            "name": "LFPProgressbar",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPScrollmeter",
          "declaration": {
            "name": "LFPScrollmeter",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPSkeleton",
          "declaration": {
            "name": "LFPSkeleton",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPTablist",
          "declaration": {
            "name": "LFPTablist",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPToC",
          "declaration": {
            "name": "LFPToC",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "LFPToast",
          "declaration": {
            "name": "LFPToast",
            "module": "dist/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utilities.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Class representing a storage interface to save items to window.localStorage\nor similar structures and retrieve it from there.\nThis class does *not* provide asynchronous functionality.",
          "name": "StorageController",
          "members": [
            {
              "kind": "field",
              "name": "storage",
              "default": "storage"
            },
            {
              "kind": "field",
              "name": "name",
              "default": "name"
            },
            {
              "kind": "method",
              "name": "#replacer",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_"
                },
                {
                  "name": "value"
                }
              ],
              "description": "https://stackoverflow.com/questions/29085197/how-do-you-json-stringify-an-es6-map"
            },
            {
              "kind": "method",
              "name": "#reviver",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_"
                },
                {
                  "name": "value"
                }
              ],
              "description": "https://stackoverflow.com/questions/29085197/how-do-you-json-stringify-an-es6-map"
            },
            {
              "kind": "method",
              "name": "save",
              "parameters": [
                {
                  "name": "items",
                  "description": "Map of items to add to the storage",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Adds one of more key/value pairs to the storage object."
            },
            {
              "kind": "method",
              "name": "load",
              "parameters": [
                {
                  "name": "key",
                  "description": "a key of the storage object",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns a specific value to a given key.",
              "return": {
                "type": {
                  "text": "any|undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "saveAll",
              "parameters": [
                {
                  "name": "input",
                  "description": "the map to be stored in the storage object",
                  "type": {
                    "text": "Map<string, any>"
                  }
                }
              ],
              "description": "Saves a map to the storage object.\n\n**Beware**: `saveAll` overwrites all entries in the storage object. For\nadding values without overwriting unaffected ones, use `save`."
            },
            {
              "kind": "method",
              "name": "loadAll",
              "description": "Returns a map with the entire storage object content.",
              "return": {
                "type": {
                  "text": "Map<string, any>"
                }
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "addStylesheet",
          "parameters": [
            {
              "name": "text",
              "description": "the given CSS styles (must comply to CSS standards!)",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Adds the given text, which must comply to CSS standards, as a `CSSStyleSheet`\nobject to the documents list of adopted stylesheets."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StorageController",
          "declaration": {
            "name": "StorageController",
            "module": "dist/utilities.js"
          }
        },
        {
          "kind": "js",
          "name": "addStylesheet",
          "declaration": {
            "name": "addStylesheet",
            "module": "dist/utilities.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Disclosure.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPDisclosure",
          "members": [
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLButtonElement | null"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "HTMLElement | null"
              }
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event object"
                }
              ],
              "description": "Handle click events"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-disclosure",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPDisclosure",
            "module": "src/Disclosure.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-disclosure",
          "declaration": {
            "name": "LFPDisclosure",
            "module": "src/Disclosure.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Heading.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPHeading",
          "members": [
            {
              "kind": "field",
              "name": "id",
              "default": "id"
            },
            {
              "kind": "field",
              "name": "href",
              "default": "`#${id}`"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-h",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPHeading",
            "module": "src/Heading.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-h",
          "declaration": {
            "name": "LFPHeading",
            "module": "src/Heading.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Nixie.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPNixieTube",
          "members": [
            {
              "kind": "field",
              "name": "clsPrefix",
              "type": {
                "text": "string"
              },
              "default": "'digit-'"
            },
            {
              "kind": "field",
              "name": "digitAttr",
              "type": {
                "text": "string"
              },
              "default": "'active-digit'"
            },
            {
              "kind": "field",
              "name": "activeDigit",
              "type": {
                "text": "number"
              }
            }
          ],
          "attributes": [
            {
              "name": "active-digit"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-nixie-tube",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPNixieTube",
            "module": "src/Nixie.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-nixie-tube",
          "declaration": {
            "name": "LFPNixieTube",
            "module": "src/Nixie.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Numberinput.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPNumberInput",
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | null"
              }
            },
            {
              "kind": "field",
              "name": "decrementButton",
              "type": {
                "text": "HTMLButtonElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "incrementButton",
              "type": {
                "text": "HTMLButtonElement | undefined"
              }
            },
            {
              "kind": "method",
              "name": "#createButton",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#clickAndHold",
              "privacy": "private",
              "parameters": [
                {
                  "name": "btnEl",
                  "type": {
                    "text": "HTMLButtonElement"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "CallableFunction"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-numberinput",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPNumberInput",
            "module": "src/Numberinput.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-numberinput",
          "declaration": {
            "name": "LFPNumberInput",
            "module": "src/Numberinput.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Progressbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPProgressbar",
          "members": [
            {
              "kind": "field",
              "name": "showValue",
              "type": {
                "text": "boolean"
              },
              "default": "!!this.getAttribute('show-value')"
            },
            {
              "kind": "field",
              "name": "notify",
              "type": {
                "text": "boolean"
              },
              "default": "!!this.getAttribute('aria-notify')"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "textLabel",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "range"
            },
            {
              "kind": "field",
              "name": "output",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "method",
              "name": "#setTextLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "rel",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "abs",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "abs",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "update",
              "static": true,
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-progressbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPProgressbar",
            "module": "src/Progressbar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-progressbar",
          "declaration": {
            "name": "LFPProgressbar",
            "module": "src/Progressbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Scrollmeter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPScrollMeter",
          "members": [
            {
              "kind": "field",
              "name": "viewportHeight",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "pageHeight",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "barSize",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "meterSize",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "meter"
            },
            {
              "kind": "method",
              "name": "#init",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-scrollmeter",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPScrollMeter",
            "module": "src/Scrollmeter.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-scrollmeter",
          "declaration": {
            "name": "LFPScrollMeter",
            "module": "src/Scrollmeter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPSkeletext",
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-skeletext",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPSkeletext",
            "module": "src/Skeleton.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-skeletext",
          "declaration": {
            "name": "LFPSkeletext",
            "module": "src/Skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Tablist.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A W3 compliant tab list web component.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/tabs/",
          "name": "LFPTablist",
          "members": [
            {
              "kind": "field",
              "name": "tabMenu",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "NodeListOf<Element>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical' | string"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "backKey",
              "type": {
                "text": "'ArrowLeft' | 'ArrowUp'"
              },
              "privacy": "private",
              "readonly": true,
              "default": "'ArrowLeft'"
            },
            {
              "kind": "field",
              "name": "forwardKey",
              "type": {
                "text": "'ArrowRight' | 'ArrowDown'"
              },
              "privacy": "private",
              "readonly": true,
              "default": "'ArrowRight'"
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "HTMLButtonElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "#setLinkedHeading",
              "privacy": "private",
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "selected",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#createTabButton",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              "parameters": [
                {
                  "name": "description",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "tabindex",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleVisibility",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setAttributes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "items",
                  "type": {
                    "text": "Map<string, string>"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-tablist",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPTablist",
            "module": "src/Tablist.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-tablist",
          "declaration": {
            "name": "LFPTablist",
            "module": "src/Tablist.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/ToC.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This class creates a comprehensive table of contents from a list of given\nheadings found in the document. The ToC can be updated during runtime through\nlistening to the `lfp:update-toc` event on the document root.",
          "name": "LFPToC",
          "members": [
            {
              "kind": "field",
              "name": "maxLevel",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "minLevel",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headings",
              "type": {
                "text": "NodeListOf<HTMLHeadingElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#isValidAttr",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "string"
                  },
                  "description": "the attribute's name"
                },
                {
                  "name": "bool",
                  "default": "false",
                  "description": "flag if you expect the attribute to function as a\nboolean indicator, i.e., the attribute does not need a value and this\nfunction is only checking if the attribute is present on the element at all",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "`element.getAttribute()` returns the factual value the element's attribute\nactually has. This means that it returns a truish empty string if the\nattribute is present but there is no value given. If you want to verify that\nthere is a value (because your component depends on it) you have to actively\ncheck for this, too. This function offers a short-hand for this process."
            },
            {
              "kind": "method",
              "name": "#setupObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#createToC",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#collectHeadings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setId",
              "privacy": "private",
              "parameters": [
                {
                  "name": "headings",
                  "type": {
                    "text": "NodeListOf<HTMLHeadingElement>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#createSelectorStr",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Creates a valid selector string from a range of numbers to gather a\nNodeList of headings of the document"
            },
            {
              "kind": "method",
              "name": "#createListElement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "headings",
                  "type": {
                    "text": "NodeListOf<HTMLHeadingElement>"
                  },
                  "description": "a NodeList of heading\nelements to be included in the table of content"
                },
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  },
                  "description": "the starting point at which to enter the node list"
                }
              ],
              "description": "Creates the content for the ToC by iterating recursively over all given headings",
              "return": {
                "type": {
                  "text": ""
                }
              }
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-toc",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPToC",
            "module": "src/ToC.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-toc",
          "declaration": {
            "name": "LFPToC",
            "module": "src/ToC.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Toast.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LFPToast",
          "members": [
            {
              "kind": "field",
              "name": "ul"
            },
            {
              "kind": "field",
              "name": "delay"
            },
            {
              "kind": "field",
              "name": "dismissable",
              "type": {
                "text": "boolean"
              },
              "default": "!!this.getAttribute('close-button')"
            },
            {
              "kind": "field",
              "name": "animationDelay",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "LFPToastEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#remove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "ChildNode | HTMLElement | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "static": true,
              "parameters": [
                {
                  "name": "description",
                  "type": {
                    "text": "String"
                  },
                  "description": "Text to describe what the user is informed about (keep it short!)"
                },
                {
                  "name": "title",
                  "type": {
                    "text": "String?"
                  },
                  "description": "An optional title for the toast."
                },
                {
                  "name": "dismissable",
                  "default": "false",
                  "description": "Toggle if the dismissable with a close button.",
                  "optional": true,
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Emits a signal that is catched by the toast component to give out a toast.\n\n**Example**:\n```js\nLFPToast.emit('Toast description', 'Toast title', true);\n```"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "lfp-toast",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LFPToast",
            "module": "src/Toast.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lfp-toast",
          "declaration": {
            "name": "LFPToast",
            "module": "src/Toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "LFPDisclosure",
          "declaration": {
            "name": "LFPDisclosure",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPNixie",
          "declaration": {
            "name": "LFPNixie",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPNumberinput",
          "declaration": {
            "name": "LFPNumberinput",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPProgressbar",
          "declaration": {
            "name": "LFPProgressbar",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPScrollmeter",
          "declaration": {
            "name": "LFPScrollmeter",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPSkeleton",
          "declaration": {
            "name": "LFPSkeleton",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPTablist",
          "declaration": {
            "name": "LFPTablist",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPToC",
          "declaration": {
            "name": "LFPToC",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "LFPToast",
          "declaration": {
            "name": "LFPToast",
            "module": "src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Class representing a storage interface to save items to window.localStorage\nor similar structures and retrieve it from there.\nThis class does *not* provide asynchronous functionality.",
          "name": "StorageController",
          "members": [
            {
              "kind": "field",
              "name": "storage",
              "type": {
                "text": "StorageFacility"
              },
              "privacy": "private",
              "readonly": true,
              "default": "storage"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "readonly": true,
              "default": "name"
            },
            {
              "kind": "method",
              "name": "#replacer",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "https://stackoverflow.com/questions/29085197/how-do-you-json-stringify-an-es6-map"
            },
            {
              "kind": "method",
              "name": "#reviver",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "https://stackoverflow.com/questions/29085197/how-do-you-json-stringify-an-es6-map"
            },
            {
              "kind": "method",
              "name": "save",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "string"
                  },
                  "description": "Map of items to add to the storage"
                }
              ],
              "description": "Adds one of more key/value pairs to the storage object."
            },
            {
              "kind": "method",
              "name": "load",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "any|undefined"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "a key of the storage object"
                }
              ],
              "description": "Returns a specific value to a given key."
            },
            {
              "kind": "method",
              "name": "saveAll",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "Map<string, any>"
                  },
                  "description": "the map to be stored in the storage object"
                }
              ],
              "description": "Saves a map to the storage object.\n\n**Beware**: `saveAll` overwrites all entries in the storage object. For\nadding values without overwriting unaffected ones, use `save`."
            },
            {
              "kind": "method",
              "name": "loadAll",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Map<string, any>"
                }
              },
              "description": "Returns a map with the entire storage object content."
            }
          ]
        },
        {
          "kind": "function",
          "name": "addStylesheet",
          "parameters": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "the given CSS styles (must comply to CSS standards!)"
            }
          ],
          "description": "Adds the given text, which must comply to CSS standards, as a `CSSStyleSheet`\nobject to the documents list of adopted stylesheets."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StorageController",
          "declaration": {
            "name": "StorageController",
            "module": "src/utilities.ts"
          }
        },
        {
          "kind": "js",
          "name": "addStylesheet",
          "declaration": {
            "name": "addStylesheet",
            "module": "src/utilities.ts"
          }
        }
      ]
    }
  ]
}
